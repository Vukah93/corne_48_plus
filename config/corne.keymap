/*
 * Copyright (c) 2023 Your Name
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/backlight.h> // For backlight behaviors

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp ESC   &kp Q     &kp W     &kp E     &kp R     &kp T
                &kp TAB   &kp A     &kp S     &kp D     &kp F     &kp G
                &kp LCTL  &kp Z     &kp X     &kp C     &kp V     &kp B
                &kp LSFT  &kp RET   &kp LALT  &kp LGUI  &mo 1     &kp SPACE
                // Right half - assuming standard Corne layout (thumb keys below)
                &kp PG_UP &kp Y     &kp U     &kp I     &kp O     &kp P
                &kp BSPC  &kp H     &kp J     &kp K     &kp L     &kp DOT
                &kp CAPS  &kp N     &kp M     &kp COMMA &kp DOT   &kp SLASH
                &kp SPACE &mo 1     &kp RALT  &kp RGUI  &kp RCTL  &kp RET
            >;
        };

        layer_1 {
            bindings = <
                &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
                &kp N7 &kp N8 &kp N9 &kp PLUS &kp PG_DN &trans
                &kp N4 &kp N5 &kp N6 &kp MINUS &trans &trans
                &kp N1 &kp N2 &kp N3 &kp DOT   &trans &trans
                &kp N0 &kp DOT &trans &trans &trans &trans
            >;
        };

        layer_2 {
            bindings = <
                &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
                &kp UP &kp HOME &kp END &kp DEL &trans &trans
                &kp LEFT &kp DOWN &kp RIGHT &trans &trans &trans
                &kp PG_UP &kp PG_DN &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
            >;
        };
    };

    // Encoder definitions (mapping to layers)
    // ZMK xử lý encoder thông qua behaviors.
    // encoder_1 là tên bạn đã đặt trong .overlay
    encoders {
        compatible = "zmk,encoders";
        // LƯU Ý: Đây là ví dụ cơ bản. Logic cụ thể cho từng layer cần thêm behaviors tùy chỉnh.
        // Đối với encoder xoay (clockwise/counter-clockwise)
        encoder_1: encoder_1 {
            sensor = <&encoder_1>; // Tham chiếu đến encoder đã định nghĩa trong .overlay
            // Các bindings này sẽ áp dụng cho tất cả các layer nếu không có điều kiện layer
            // Để có hành vi khác nhau trên mỗi layer, bạn cần Behavior Objects tùy chỉnh.
            // Ví dụ: Xoay chiều kim đồng hồ tăng âm lượng, ngược chiều giảm âm lượng
            encoder-clockwise-binding = <&kp VOL_UP>;
            encoder-counter-clockwise-binding = <&kp VOL_DN>;
            // Nút nhấn của encoder (nếu nó là một nút ma trận bình thường, bạn định nghĩa nó trong keymap)
        };
    };

    // Joystick behaviors (Đây là phần phức tạp nhất)
    // ZMK không có built-in joystick handler như QMK.
    // Để có các chức năng joystick như bạn đã mô tả trong QMK (JS_ESC, JS_Q, v.v.)
    // bạn cần viết một ZMK Behavior tùy chỉnh bằng C.
    // Điều này vượt ra ngoài phạm vi của việc cấu hình các file .overlay/.keymap.
    // Hiện tại, chúng ta sẽ không định nghĩa behaviors cho joystick ở đây, vì nó cần mã C.
    // Nếu bạn muốn tiếp tục với joystick, chúng ta cần thảo luận riêng về việc tạo custom behaviors.
};